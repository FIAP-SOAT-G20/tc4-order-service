// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/order_product_datasource_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/order_product_datasource_port.go -destination=internal/core/port/mocks/order_product_datasource_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderProductDataSource is a mock of OrderProductDataSource interface.
type MockOrderProductDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProductDataSourceMockRecorder
	isgomock struct{}
}

// MockOrderProductDataSourceMockRecorder is the mock recorder for MockOrderProductDataSource.
type MockOrderProductDataSourceMockRecorder struct {
	mock *MockOrderProductDataSource
}

// NewMockOrderProductDataSource creates a new mock instance.
func NewMockOrderProductDataSource(ctrl *gomock.Controller) *MockOrderProductDataSource {
	mock := &MockOrderProductDataSource{ctrl: ctrl}
	mock.recorder = &MockOrderProductDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProductDataSource) EXPECT() *MockOrderProductDataSourceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderProductDataSource) Create(ctx context.Context, order *entity.OrderProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderProductDataSourceMockRecorder) Create(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderProductDataSource)(nil).Create), ctx, order)
}

// Delete mocks base method.
func (m *MockOrderProductDataSource) Delete(ctx context.Context, orderId, productId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, orderId, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderProductDataSourceMockRecorder) Delete(ctx, orderId, productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderProductDataSource)(nil).Delete), ctx, orderId, productId)
}

// FindAll mocks base method.
func (m *MockOrderProductDataSource) FindAll(ctx context.Context, filters map[string]any, page, limit int) ([]*entity.OrderProduct, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filters, page, limit)
	ret0, _ := ret[0].([]*entity.OrderProduct)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockOrderProductDataSourceMockRecorder) FindAll(ctx, filters, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockOrderProductDataSource)(nil).FindAll), ctx, filters, page, limit)
}

// FindByID mocks base method.
func (m *MockOrderProductDataSource) FindByID(ctx context.Context, orderId, productId uint64) (*entity.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, orderId, productId)
	ret0, _ := ret[0].(*entity.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockOrderProductDataSourceMockRecorder) FindByID(ctx, orderId, productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockOrderProductDataSource)(nil).FindByID), ctx, orderId, productId)
}

// Transaction mocks base method.
func (m *MockOrderProductDataSource) Transaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockOrderProductDataSourceMockRecorder) Transaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockOrderProductDataSource)(nil).Transaction), ctx, fn)
}

// Update mocks base method.
func (m *MockOrderProductDataSource) Update(ctx context.Context, order *entity.OrderProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderProductDataSourceMockRecorder) Update(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderProductDataSource)(nil).Update), ctx, order)
}
