// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/auth_controller_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/auth_controller_port.go -destination=internal/core/port/mocks/auth_controller_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	dto "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/dto"
	port "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/port"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthController is a mock of AuthController interface.
type MockAuthController struct {
	ctrl     *gomock.Controller
	recorder *MockAuthControllerMockRecorder
	isgomock struct{}
}

// MockAuthControllerMockRecorder is the mock recorder for MockAuthController.
type MockAuthControllerMockRecorder struct {
	mock *MockAuthController
}

// NewMockAuthController creates a new mock instance.
func NewMockAuthController(ctrl *gomock.Controller) *MockAuthController {
	mock := &MockAuthController{ctrl: ctrl}
	mock.recorder = &MockAuthControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthController) EXPECT() *MockAuthControllerMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthController) Authenticate(ctx context.Context, presenter port.Presenter, input dto.AuthenticateInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, presenter, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthControllerMockRecorder) Authenticate(ctx, presenter, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthController)(nil).Authenticate), ctx, presenter, input)
}
