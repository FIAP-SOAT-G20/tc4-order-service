// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/order_gateway_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/order_gateway_port.go -destination=internal/core/port/mocks/order_gateway_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/entity"
	valueobject "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/value_object"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderGateway is a mock of OrderGateway interface.
type MockOrderGateway struct {
	ctrl     *gomock.Controller
	recorder *MockOrderGatewayMockRecorder
	isgomock struct{}
}

// MockOrderGatewayMockRecorder is the mock recorder for MockOrderGateway.
type MockOrderGatewayMockRecorder struct {
	mock *MockOrderGateway
}

// NewMockOrderGateway creates a new mock instance.
func NewMockOrderGateway(ctrl *gomock.Controller) *MockOrderGateway {
	mock := &MockOrderGateway{ctrl: ctrl}
	mock.recorder = &MockOrderGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderGateway) EXPECT() *MockOrderGatewayMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderGateway) Create(ctx context.Context, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderGatewayMockRecorder) Create(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderGateway)(nil).Create), ctx, order)
}

// Delete mocks base method.
func (m *MockOrderGateway) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderGatewayMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderGateway)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockOrderGateway) FindAll(ctx context.Context, customerId uint64, status, statusExclude []valueobject.OrderStatus, page, limit int, sort string) ([]*entity.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, customerId, status, statusExclude, page, limit, sort)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockOrderGatewayMockRecorder) FindAll(ctx, customerId, status, statusExclude, page, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockOrderGateway)(nil).FindAll), ctx, customerId, status, statusExclude, page, limit, sort)
}

// FindByID mocks base method.
func (m *MockOrderGateway) FindByID(ctx context.Context, id uint64) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockOrderGatewayMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockOrderGateway)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockOrderGateway) Update(ctx context.Context, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderGatewayMockRecorder) Update(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderGateway)(nil).Update), ctx, order)
}
