// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/payment_gateway_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/payment_gateway_port.go -destination=internal/core/port/mocks/payment_gateway_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/entity"
	valueobject "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/value_object"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentGateway is a mock of PaymentGateway interface.
type MockPaymentGateway struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentGatewayMockRecorder
	isgomock struct{}
}

// MockPaymentGatewayMockRecorder is the mock recorder for MockPaymentGateway.
type MockPaymentGatewayMockRecorder struct {
	mock *MockPaymentGateway
}

// NewMockPaymentGateway creates a new mock instance.
func NewMockPaymentGateway(ctrl *gomock.Controller) *MockPaymentGateway {
	mock := &MockPaymentGateway{ctrl: ctrl}
	mock.recorder = &MockPaymentGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentGateway) EXPECT() *MockPaymentGatewayMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentGateway) Create(ctx context.Context, payment *entity.Payment) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, payment)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPaymentGatewayMockRecorder) Create(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentGateway)(nil).Create), ctx, payment)
}

// CreateExternal mocks base method.
func (m *MockPaymentGateway) CreateExternal(ctx context.Context, payment *entity.CreatePaymentExternalInput) (*entity.CreatePaymentExternalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternal", ctx, payment)
	ret0, _ := ret[0].(*entity.CreatePaymentExternalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExternal indicates an expected call of CreateExternal.
func (mr *MockPaymentGatewayMockRecorder) CreateExternal(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternal", reflect.TypeOf((*MockPaymentGateway)(nil).CreateExternal), ctx, payment)
}

// FindByExternalPaymentID mocks base method.
func (m *MockPaymentGateway) FindByExternalPaymentID(ctx context.Context, resource string) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExternalPaymentID", ctx, resource)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExternalPaymentID indicates an expected call of FindByExternalPaymentID.
func (mr *MockPaymentGatewayMockRecorder) FindByExternalPaymentID(ctx, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExternalPaymentID", reflect.TypeOf((*MockPaymentGateway)(nil).FindByExternalPaymentID), ctx, resource)
}

// FindByOrderID mocks base method.
func (m *MockPaymentGateway) FindByOrderID(ctx context.Context, orderID uint64) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrderID indicates an expected call of FindByOrderID.
func (mr *MockPaymentGatewayMockRecorder) FindByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrderID", reflect.TypeOf((*MockPaymentGateway)(nil).FindByOrderID), ctx, orderID)
}

// FindByOrderIDAndStatusProcessing mocks base method.
func (m *MockPaymentGateway) FindByOrderIDAndStatusProcessing(ctx context.Context, orderID uint64) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrderIDAndStatusProcessing", ctx, orderID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrderIDAndStatusProcessing indicates an expected call of FindByOrderIDAndStatusProcessing.
func (mr *MockPaymentGatewayMockRecorder) FindByOrderIDAndStatusProcessing(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrderIDAndStatusProcessing", reflect.TypeOf((*MockPaymentGateway)(nil).FindByOrderIDAndStatusProcessing), ctx, orderID)
}

// Update mocks base method.
func (m *MockPaymentGateway) Update(ctx context.Context, status valueobject.PaymentStatus, resource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, status, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPaymentGatewayMockRecorder) Update(ctx, status, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPaymentGateway)(nil).Update), ctx, status, resource)
}
