// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/payment_datasource_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/payment_datasource_port.go -destination=internal/core/port/mocks/payment_datasource_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/entity"
	valueobject "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/value_object"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentDataSource is a mock of PaymentDataSource interface.
type MockPaymentDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentDataSourceMockRecorder
	isgomock struct{}
}

// MockPaymentDataSourceMockRecorder is the mock recorder for MockPaymentDataSource.
type MockPaymentDataSourceMockRecorder struct {
	mock *MockPaymentDataSource
}

// NewMockPaymentDataSource creates a new mock instance.
func NewMockPaymentDataSource(ctrl *gomock.Controller) *MockPaymentDataSource {
	mock := &MockPaymentDataSource{ctrl: ctrl}
	mock.recorder = &MockPaymentDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentDataSource) EXPECT() *MockPaymentDataSourceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentDataSource) Create(ctx context.Context, payment *entity.Payment) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, payment)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPaymentDataSourceMockRecorder) Create(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentDataSource)(nil).Create), ctx, payment)
}

// GetByExternalPaymentID mocks base method.
func (m *MockPaymentDataSource) GetByExternalPaymentID(ctx context.Context, externalPaymentID string) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalPaymentID", ctx, externalPaymentID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalPaymentID indicates an expected call of GetByExternalPaymentID.
func (mr *MockPaymentDataSourceMockRecorder) GetByExternalPaymentID(ctx, externalPaymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalPaymentID", reflect.TypeOf((*MockPaymentDataSource)(nil).GetByExternalPaymentID), ctx, externalPaymentID)
}

// GetByOrderID mocks base method.
func (m *MockPaymentDataSource) GetByOrderID(ctx context.Context, orderID uint64) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderID indicates an expected call of GetByOrderID.
func (mr *MockPaymentDataSourceMockRecorder) GetByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderID", reflect.TypeOf((*MockPaymentDataSource)(nil).GetByOrderID), ctx, orderID)
}

// GetByOrderIDAndStatusProcessing mocks base method.
func (m *MockPaymentDataSource) GetByOrderIDAndStatusProcessing(ctx context.Context, orderID uint64) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderIDAndStatusProcessing", ctx, orderID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderIDAndStatusProcessing indicates an expected call of GetByOrderIDAndStatusProcessing.
func (mr *MockPaymentDataSourceMockRecorder) GetByOrderIDAndStatusProcessing(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderIDAndStatusProcessing", reflect.TypeOf((*MockPaymentDataSource)(nil).GetByOrderIDAndStatusProcessing), ctx, orderID)
}

// UpdateStatus mocks base method.
func (m *MockPaymentDataSource) UpdateStatus(ctx context.Context, status valueobject.PaymentStatus, externalPaymentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, status, externalPaymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockPaymentDataSourceMockRecorder) UpdateStatus(ctx, status, externalPaymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockPaymentDataSource)(nil).UpdateStatus), ctx, status, externalPaymentID)
}
