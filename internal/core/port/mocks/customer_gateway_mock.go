// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/customer_gateway_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/customer_gateway_port.go -destination=internal/core/port/mocks/customer_gateway_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerGateway is a mock of CustomerGateway interface.
type MockCustomerGateway struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerGatewayMockRecorder
	isgomock struct{}
}

// MockCustomerGatewayMockRecorder is the mock recorder for MockCustomerGateway.
type MockCustomerGatewayMockRecorder struct {
	mock *MockCustomerGateway
}

// NewMockCustomerGateway creates a new mock instance.
func NewMockCustomerGateway(ctrl *gomock.Controller) *MockCustomerGateway {
	mock := &MockCustomerGateway{ctrl: ctrl}
	mock.recorder = &MockCustomerGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerGateway) EXPECT() *MockCustomerGatewayMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerGateway) Create(ctx context.Context, customer *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerGatewayMockRecorder) Create(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerGateway)(nil).Create), ctx, customer)
}

// Delete mocks base method.
func (m *MockCustomerGateway) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerGatewayMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerGateway)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockCustomerGateway) FindAll(ctx context.Context, name string, page, limit int) ([]*entity.Customer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, name, page, limit)
	ret0, _ := ret[0].([]*entity.Customer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCustomerGatewayMockRecorder) FindAll(ctx, name, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCustomerGateway)(nil).FindAll), ctx, name, page, limit)
}

// FindByCPF mocks base method.
func (m *MockCustomerGateway) FindByCPF(ctx context.Context, cpf string) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCPF", ctx, cpf)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCPF indicates an expected call of FindByCPF.
func (mr *MockCustomerGatewayMockRecorder) FindByCPF(ctx, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCPF", reflect.TypeOf((*MockCustomerGateway)(nil).FindByCPF), ctx, cpf)
}

// FindByID mocks base method.
func (m *MockCustomerGateway) FindByID(ctx context.Context, id uint64) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCustomerGatewayMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCustomerGateway)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockCustomerGateway) Update(ctx context.Context, customer *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerGatewayMockRecorder) Update(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerGateway)(nil).Update), ctx, customer)
}
