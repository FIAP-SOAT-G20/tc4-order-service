// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/order_product_usecase_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/order_product_usecase_port.go -destination=internal/core/port/mocks/order_product_usecase_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/domain/entity"
	dto "github.com/FIAP-SOAT-G20/fiap-tech-challenge-3-api/internal/core/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderProductUseCase is a mock of OrderProductUseCase interface.
type MockOrderProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProductUseCaseMockRecorder
	isgomock struct{}
}

// MockOrderProductUseCaseMockRecorder is the mock recorder for MockOrderProductUseCase.
type MockOrderProductUseCaseMockRecorder struct {
	mock *MockOrderProductUseCase
}

// NewMockOrderProductUseCase creates a new mock instance.
func NewMockOrderProductUseCase(ctrl *gomock.Controller) *MockOrderProductUseCase {
	mock := &MockOrderProductUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProductUseCase) EXPECT() *MockOrderProductUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderProductUseCase) Create(ctx context.Context, input dto.CreateOrderProductInput) (*entity.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(*entity.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderProductUseCaseMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderProductUseCase)(nil).Create), ctx, input)
}

// Delete mocks base method.
func (m *MockOrderProductUseCase) Delete(ctx context.Context, input dto.DeleteOrderProductInput) (*entity.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, input)
	ret0, _ := ret[0].(*entity.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderProductUseCaseMockRecorder) Delete(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderProductUseCase)(nil).Delete), ctx, input)
}

// Get mocks base method.
func (m *MockOrderProductUseCase) Get(ctx context.Context, input dto.GetOrderProductInput) (*entity.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, input)
	ret0, _ := ret[0].(*entity.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderProductUseCaseMockRecorder) Get(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderProductUseCase)(nil).Get), ctx, input)
}

// List mocks base method.
func (m *MockOrderProductUseCase) List(ctx context.Context, input dto.ListOrderProductsInput) ([]*entity.OrderProduct, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].([]*entity.OrderProduct)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOrderProductUseCaseMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrderProductUseCase)(nil).List), ctx, input)
}

// Update mocks base method.
func (m *MockOrderProductUseCase) Update(ctx context.Context, input dto.UpdateOrderProductInput) (*entity.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(*entity.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOrderProductUseCaseMockRecorder) Update(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderProductUseCase)(nil).Update), ctx, input)
}
